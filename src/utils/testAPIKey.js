// Script de test pour v√©rifier la configuration de la cl√© API

export function testAPIKeyConfiguration() {
  console.log('üîç Test de configuration de la cl√© API...');
  
  // Test 1: Variables d'environnement
  const envKey = import.meta?.env?.VITE_OPENAI_API_KEY;
  console.log('1. Variable d\'environnement VITE_OPENAI_API_KEY:', envKey ? `‚úÖ Trouv√©e (${envKey.substring(0, 10)}...)` : '‚ùå Non trouv√©e');
  
  // Test 2: LocalStorage
  const localKey = localStorage.getItem('alflight_ai_api_key');
  const localKeyAlt = localStorage.getItem('openai_api_key');
  console.log('2. LocalStorage alflight_ai_api_key:', localKey ? `‚úÖ Trouv√©e (${localKey.substring(0, 10)}...)` : '‚ùå Non trouv√©e');
  console.log('3. LocalStorage openai_api_key:', localKeyAlt ? `‚úÖ Trouv√©e (${localKeyAlt.substring(0, 10)}...)` : '‚ùå Non trouv√©e');
  
  // Test 3: apiKeyManager
  import('../utils/apiKeyManager').then(module => {
    const apiKeyManager = module.default;
    const managerKey = apiKeyManager.getAPIKey();
    console.log('4. apiKeyManager.getAPIKey():', managerKey ? `‚úÖ Trouv√©e (${managerKey.substring(0, 10)}...)` : '‚ùå Non trouv√©e');
    console.log('5. apiKeyManager.hasAPIKey():', apiKeyManager.hasAPIKey() ? '‚úÖ Oui' : '‚ùå Non');
  });
  
  // Test 4: unifiedPerformanceService
  import('../features/performance/services/unifiedPerformanceService').then(module => {
    const service = module.default;
    service.initialize();
    const serviceKey = service.apiKey;
    console.log('6. unifiedPerformanceService.apiKey:', serviceKey ? `‚úÖ Trouv√©e (${serviceKey.substring(0, 10)}...)` : '‚ùå Non trouv√©e');
  });
  
  return {
    envKey: !!envKey,
    localKey: !!localKey || !!localKeyAlt,
    total: envKey || localKey || localKeyAlt
  };
}

// Ex√©cuter automatiquement au chargement si on est en d√©veloppement
if (import.meta.env.DEV) {
  setTimeout(() => {
    console.log('==========================================');
    const result = testAPIKeyConfiguration();
    console.log('==========================================');
    console.log('R√©sum√©:', result.total ? '‚úÖ Cl√© API disponible' : '‚ùå Aucune cl√© API trouv√©e');
    console.log('==========================================');
  }, 1000);
}