// src/utils/aircraftNormalizer.js
// Syst√®me de normalisation des unit√©s pour les avions import√©s/export√©s

import { Conversions } from './conversions';

/**
 * Unit√©s de stockage interne (normalis√©es)
 * Toutes les donn√©es sont stock√©es dans ces unit√©s pour garantir la coh√©rence
 */
const STORAGE_UNITS = {
  fuelConsumption: 'lph',  // Litres par heure
  fuelCapacity: 'ltr',     // Litres
  cruiseSpeed: 'kt',       // N≈ìuds (pas de conversion n√©cessaire)
  maxSpeed: 'kt',
  climbRate: 'fpm',        // Feet per minute
  serviceCeiling: 'ft',    // Feet
  range: 'nm',             // Nautical miles
  weight: 'kg',            // Kilogrammes
  emptyWeight: 'kg',
  maxTakeoffWeight: 'kg'
};

/**
 * Version du syst√®me de m√©tadonn√©es
 */
const METADATA_VERSION = '1.0';

/**
 * Normaliser un avion import√© vers les unit√©s de stockage
 * @param {Object} aircraftData - Donn√©es de l'avion import√©
 * @returns {Object} Avion normalis√© avec unit√©s de stockage
 */
export function normalizeAircraftImport(aircraftData) {
  if (!aircraftData) return null;

  // Extraire les m√©tadonn√©es d'unit√©s
  const metadata = aircraftData._metadata || {};
  const sourceUnits = metadata.units || {};

  console.log('üîÑ [Normalizer] Import aircraft:', {
    registration: aircraftData.registration,
    sourceMetadata: metadata,
    hasMetadata: !!aircraftData._metadata
  });

  // Cr√©er une copie de l'avion
  const normalized = { ...aircraftData };

  // Normaliser chaque propri√©t√© avec conversion si n√©cessaire
  Object.keys(STORAGE_UNITS).forEach(property => {
    if (aircraftData[property] !== undefined && aircraftData[property] !== null) {
      const value = aircraftData[property];
      const sourceUnit = sourceUnits[property] || STORAGE_UNITS[property];
      const targetUnit = STORAGE_UNITS[property];

      // Si l'unit√© source est diff√©rente de l'unit√© de stockage, convertir
      if (sourceUnit !== targetUnit) {
        normalized[property] = convertValue(value, property, sourceUnit, targetUnit);

        console.log(`  ‚úì ${property}: ${value} ${sourceUnit} ‚Üí ${normalized[property].toFixed(2)} ${targetUnit}`);
      } else {
        normalized[property] = value;
        console.log(`  = ${property}: ${value} ${targetUnit} (pas de conversion)`);
      }
    }
  });

  // üîß MAPPING CRITIQUE : Mapper "arms" ‚Üí "weightBalance" pour compatibilit√©
  // Les donn√©es Supabase utilisent "arms" mais le code attend "weightBalance"
  if (aircraftData.arms) {
    console.log('üîÑ [Normalizer] Found arms data:', aircraftData.arms);

    // Helper pour parser et √©viter NaN (parseFloat('') = NaN)
    const parseArm = (value, defaultValue = 0) => {
      if (!value || value === '') return defaultValue;
      const parsed = parseFloat(value);
      return isNaN(parsed) ? defaultValue : parsed;
    };

    normalized.weightBalance = {
      emptyWeightArm: parseArm(aircraftData.arms.empty),
      fuelArm: parseArm(aircraftData.arms.fuelMain),
      frontLeftSeatArm: parseArm(aircraftData.arms.frontSeats),
      frontRightSeatArm: parseArm(aircraftData.arms.frontSeats),
      rearLeftSeatArm: parseArm(aircraftData.arms.rearSeats),
      rearRightSeatArm: parseArm(aircraftData.arms.rearSeats),
      baggageArm: parseArm(aircraftData.arms.baggageFwd),
      auxiliaryArm: parseArm(aircraftData.arms.baggageAft),
      // Conserver aussi les donn√©es CG limits si pr√©sentes
      ...(aircraftData.weightBalance || {})
    };
    console.log('‚úì [Normalizer] Mapped arms ‚Üí weightBalance:', normalized.weightBalance);
  } else {
    console.warn('‚ö†Ô∏è [Normalizer] No arms data found in aircraftData');
  }

  // üîß Conserver aussi armLengths si d√©j√† pr√©sent (compatibilit√©)
  if (aircraftData.armLengths) {
    normalized.armLengths = aircraftData.armLengths;
  }

  // üîß Conserver baggageCompartments (donn√©es dynamiques)
  if (aircraftData.baggageCompartments) {
    normalized.baggageCompartments = aircraftData.baggageCompartments.map(comp => ({
      ...comp,
      arm: parseFloat(comp.arm) || 0,
      maxWeight: parseFloat(comp.maxWeight) || 0
    }));
    console.log('‚úì Preserved baggageCompartments:', normalized.baggageCompartments.length);
  }

  // Supprimer _metadata de l'objet normalis√© (d√©j√† utilis√© pour la conversion)
  delete normalized._metadata;

  console.log('‚úÖ [Normalizer] Aircraft normalized for storage');

  return normalized;
}

/**
 * Pr√©parer un avion pour l'export avec les m√©tadonn√©es d'unit√©s
 * @param {Object} aircraftData - Donn√©es de l'avion (en unit√©s de stockage)
 * @param {Object} userUnits - Pr√©f√©rences d'unit√©s de l'utilisateur
 * @returns {Object} Avion avec m√©tadonn√©es pour l'export
 */
export function prepareAircraftExport(aircraftData, userUnits) {
  if (!aircraftData) return null;

  console.log('üì§ [Normalizer] Preparing export:', {
    registration: aircraftData.registration,
    userUnits: userUnits
  });

  // Cr√©er une copie de l'avion
  const exported = { ...aircraftData };

  // Convertir chaque propri√©t√© vers les unit√©s de l'utilisateur
  Object.keys(STORAGE_UNITS).forEach(property => {
    if (aircraftData[property] !== undefined && aircraftData[property] !== null) {
      const value = aircraftData[property];
      const sourceUnit = STORAGE_UNITS[property];
      const targetUnit = getUserUnit(property, userUnits);

      // Convertir si n√©cessaire
      if (sourceUnit !== targetUnit) {
        exported[property] = convertValue(value, property, sourceUnit, targetUnit);

        console.log(`  ‚úì ${property}: ${value} ${sourceUnit} ‚Üí ${exported[property].toFixed(2)} ${targetUnit}`);
      } else {
        exported[property] = value;
        console.log(`  = ${property}: ${value} ${targetUnit} (pas de conversion)`);
      }
    }
  });

  // Ajouter les m√©tadonn√©es
  exported._metadata = {
    version: METADATA_VERSION,
    units: buildUnitsMetadata(userUnits),
    exportedAt: new Date().toISOString(),
    exportedBy: 'ALFlight-User' // TODO: R√©cup√©rer l'ID utilisateur r√©el
  };

  console.log('‚úÖ [Normalizer] Aircraft prepared for export with metadata');

  return exported;
}

/**
 * Convertir une valeur d'une unit√© √† une autre
 * @param {number} value - Valeur √† convertir
 * @param {string} property - Nom de la propri√©t√© (ex: 'fuelConsumption')
 * @param {string} fromUnit - Unit√© source
 * @param {string} toUnit - Unit√© cible
 * @returns {number} Valeur convertie
 */
function convertValue(value, property, fromUnit, toUnit) {
  if (fromUnit === toUnit) return value;

  // Mapping des propri√©t√©s vers les cat√©gories de conversion
  const categoryMap = {
    fuelConsumption: 'fuelConsumption',
    fuelCapacity: 'fuel',
    cruiseSpeed: 'speed',
    maxSpeed: 'speed',
    climbRate: 'verticalSpeed',
    serviceCeiling: 'altitude',
    range: 'distance',
    weight: 'weight',
    emptyWeight: 'weight',
    maxTakeoffWeight: 'weight'
  };

  const category = categoryMap[property];
  if (!category) {
    console.warn(`‚ö†Ô∏è Unknown property for conversion: ${property}`);
    return value;
  }

  try {
    // Utiliser le syst√®me de conversion existant
    return Conversions[category](value, fromUnit, toUnit);
  } catch (error) {
    console.error(`‚ùå Conversion error for ${property}:`, error);
    return value; // Retourner la valeur originale en cas d'erreur
  }
}

/**
 * Obtenir l'unit√© pr√©f√©r√©e de l'utilisateur pour une propri√©t√©
 * @param {string} property - Nom de la propri√©t√©
 * @param {Object} userUnits - Pr√©f√©rences d'unit√©s
 * @returns {string} Unit√© pr√©f√©r√©e
 */
function getUserUnit(property, userUnits) {
  // Mapping des propri√©t√©s vers les cat√©gories de pr√©f√©rences
  const preferenceMap = {
    fuelConsumption: 'fuelConsumption',
    fuelCapacity: 'fuel',
    cruiseSpeed: 'speed',
    maxSpeed: 'speed',
    climbRate: 'verticalSpeed',
    serviceCeiling: 'altitude',
    range: 'distance',
    weight: 'weight',
    emptyWeight: 'weight',
    maxTakeoffWeight: 'weight'
  };

  const preference = preferenceMap[property];
  return userUnits[preference] || STORAGE_UNITS[property];
}

/**
 * Construire les m√©tadonn√©es d'unit√©s pour l'export
 * @param {Object} userUnits - Pr√©f√©rences d'unit√©s
 * @returns {Object} M√©tadonn√©es d'unit√©s
 */
function buildUnitsMetadata(userUnits) {
  return {
    fuelConsumption: userUnits.fuelConsumption || 'lph',
    fuelCapacity: userUnits.fuel || 'ltr',
    cruiseSpeed: 'kt',
    maxSpeed: 'kt',
    climbRate: userUnits.verticalSpeed || 'fpm',
    serviceCeiling: userUnits.altitude || 'ft',
    range: userUnits.distance || 'nm',
    weight: userUnits.weight || 'kg',
    emptyWeight: userUnits.weight || 'kg',
    maxTakeoffWeight: userUnits.weight || 'kg'
  };
}

/**
 * V√©rifier si un avion a des m√©tadonn√©es d'unit√©s
 * @param {Object} aircraftData - Donn√©es de l'avion
 * @returns {boolean}
 */
export function hasUnitsMetadata(aircraftData) {
  return !!(aircraftData && aircraftData._metadata && aircraftData._metadata.units);
}

/**
 * Obtenir les m√©tadonn√©es d'un avion
 * @param {Object} aircraftData - Donn√©es de l'avion
 * @returns {Object|null}
 */
export function getAircraftMetadata(aircraftData) {
  return aircraftData?._metadata || null;
}

export default {
  normalizeAircraftImport,
  prepareAircraftExport,
  hasUnitsMetadata,
  getAircraftMetadata,
  STORAGE_UNITS,
  METADATA_VERSION
};
