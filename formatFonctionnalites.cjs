/**
 * Script pour formater et mettre en page l'onglet Fonctionnalit√©s
 * Organise les am√©liorations faites et √† faire
 */

const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

class FonctionnalitesFormatter {
  constructor() {
    this.excelPath = path.join(__dirname, 'tracking', 'alflight_tracking_v2.xlsx');
  }

  /**
   * Nettoyer et am√©liorer le texte
   */
  cleanAndImprove(text) {
    if (!text) return '';

    // Corriger les caract√®res
    let cleaned = String(text)
      .replace(/ÔøΩ/g, '√©')
      .replace(/ÔøΩ/g, '√®')
      .replace(/ÔøΩ/g, '√†')
      .replace(/ÔøΩ/g, '√ß')
      .replace(/\u0000/g, '')
      .trim();

    // Capitaliser la premi√®re lettre
    if (cleaned.length > 0) {
      cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);
    }

    return cleaned;
  }

  /**
   * D√©terminer la priorit√© automatiquement
   */
  getPriority(statut, categorie) {
    if (statut === '√Ä faire' && categorie === 'Critique') return 'üî¥ Haute';
    if (statut === '√Ä faire' && categorie === 'Important') return 'üü† Moyenne';
    if (statut === 'En cours') return 'üü° En cours';
    if (statut === 'Termin√©') return 'üü¢ Fait';
    return '‚ö™ Normale';
  }

  /**
   * Formater l'onglet Fonctionnalit√©s
   */
  async formatFonctionnalites() {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë       üìã FORMATAGE ONGLET FONCTIONNALIT√âS                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Attendez de coller vos donn√©es dans l'onglet "Fonctionnalit√©s"...
`);

    try {
      // Lire le fichier existant
      let workbook;
      if (fs.existsSync(this.excelPath)) {
        workbook = XLSX.readFile(this.excelPath);
      } else {
        workbook = XLSX.utils.book_new();
      }

      // V√©rifier si l'onglet Fonctionnalit√©s existe
      let fonctionnalitesSheet = workbook.Sheets['Fonctionnalit√©s'];

      if (!fonctionnalitesSheet) {
        console.log('üìù Cr√©ation de l\'onglet Fonctionnalit√©s avec structure de base...');

        // Cr√©er la structure de base
        const headers = [
          'ID',
          'Cat√©gorie',
          'Fonctionnalit√©',
          'Description',
          'Statut',
          'Priorit√©',
          'Module',
          'Complexit√©',
          'Date cr√©ation',
          'Date r√©alisation',
          'Notes'
        ];

        // Donn√©es d'exemple pour vous guider
        const exemplesData = [
          headers,
          [
            '1',
            'Interface',
            'Dashboard pilote',
            'Tableau de bord avec statistiques de vol, validations et alertes',
            'Termin√©',
            'üü¢ Fait',
            'PilotDashboard',
            '√âlev√©e',
            '25/09/2025',
            '28/09/2025',
            'Validation SEP/MEP, heures FI/CRI'
          ],
          [
            '2',
            'Carnet de vol',
            'Segments de vol multiples',
            'Permettre plusieurs segments par vol avec fonction et temps diff√©rents',
            'Termin√©',
            'üü¢ Fait',
            'PilotLogbook',
            'Moyenne',
            '26/09/2025',
            '29/09/2025',
            'CDB/OPL/FI-CRI par segment'
          ],
          [
            '3',
            'Export/Import',
            'Export profil complet',
            'Exporter tout le profil pilote avec licences et carnet',
            'Termin√©',
            'üü¢ Fait',
            'Export',
            'Moyenne',
            '27/09/2025',
            '29/09/2025',
            'Format JSON unifi√©'
          ],
          [
            '4',
            'iOS',
            'D√©ploiement TestFlight',
            'Configuration CI/CD pour d√©ploiement iOS sans Mac',
            'En cours',
            'üü° En cours',
            'DevOps',
            '√âlev√©e',
            '30/09/2025',
            '',
            'Codemagic + GitHub Actions'
          ],
          [
            '5',
            'Performance',
            'Optimisation chargement',
            'Am√©liorer les temps de chargement et la r√©activit√©',
            '√Ä faire',
            'üü† Moyenne',
            'Core',
            'Moyenne',
            '30/09/2025',
            '',
            'Lazy loading, code splitting'
          ],
          [
            '6',
            'M√©t√©o',
            'Int√©gration METAR/TAF',
            'Affichage m√©t√©o aviation temps r√©el pour les a√©rodromes',
            '√Ä faire',
            'üî¥ Haute',
            'Weather',
            '√âlev√©e',
            '30/09/2025',
            '',
            'API aviation m√©t√©o'
          ]
        ];

        fonctionnalitesSheet = XLSX.utils.aoa_to_sheet(exemplesData);

        // Largeurs de colonnes optimis√©es
        fonctionnalitesSheet['!cols'] = [
          { wch: 5 },   // ID
          { wch: 15 },  // Cat√©gorie
          { wch: 30 },  // Fonctionnalit√©
          { wch: 50 },  // Description
          { wch: 12 },  // Statut
          { wch: 15 },  // Priorit√©
          { wch: 20 },  // Module
          { wch: 12 },  // Complexit√©
          { wch: 12 },  // Date cr√©ation
          { wch: 15 },  // Date r√©alisation
          { wch: 40 }   // Notes
        ];

        XLSX.utils.book_append_sheet(workbook, fonctionnalitesSheet, 'Fonctionnalit√©s');

      } else {
        // Formater les donn√©es existantes
        console.log('üìä Formatage des donn√©es existantes...');

        const data = XLSX.utils.sheet_to_json(fonctionnalitesSheet, { header: 1 });

        if (data.length > 0) {
          const formattedData = [];

          // Headers am√©lior√©s
          const headers = [
            'ID',
            'Cat√©gorie',
            'Fonctionnalit√©',
            'Description',
            'Statut',
            'Priorit√©',
            'Module',
            'Complexit√©',
            'Date cr√©ation',
            'Date r√©alisation',
            'Notes'
          ];

          formattedData.push(headers);

          // Formater chaque ligne
          for (let i = 1; i < data.length; i++) {
            const row = data[i];

            if (!row || row.length === 0) continue;

            const id = row[0] || i;
            const categorie = this.cleanAndImprove(row[1] || 'G√©n√©ral');
            const fonctionnalite = this.cleanAndImprove(row[2] || '');
            const description = this.cleanAndImprove(row[3] || '');
            const statut = this.cleanAndImprove(row[4] || '√Ä faire');
            const priorite = row[5] || this.getPriority(statut, categorie);
            const module = this.cleanAndImprove(row[6] || '');
            const complexite = this.cleanAndImprove(row[7] || 'Moyenne');
            const dateCreation = row[8] || new Date().toLocaleDateString('fr-FR');
            const dateRealisation = row[9] || '';
            const notes = this.cleanAndImprove(row[10] || '');

            formattedData.push([
              id,
              categorie,
              fonctionnalite,
              description,
              statut,
              priorite,
              module,
              complexite,
              dateCreation,
              dateRealisation,
              notes
            ]);
          }

          // Recr√©er la feuille avec les donn√©es format√©es
          fonctionnalitesSheet = XLSX.utils.aoa_to_sheet(formattedData);

          // Largeurs optimis√©es
          fonctionnalitesSheet['!cols'] = [
            { wch: 5 },   // ID
            { wch: 15 },  // Cat√©gorie
            { wch: 30 },  // Fonctionnalit√©
            { wch: 50 },  // Description
            { wch: 12 },  // Statut
            { wch: 15 },  // Priorit√©
            { wch: 20 },  // Module
            { wch: 12 },  // Complexit√©
            { wch: 12 },  // Date cr√©ation
            { wch: 15 },  // Date r√©alisation
            { wch: 40 }   // Notes
          ];

          workbook.Sheets['Fonctionnalit√©s'] = fonctionnalitesSheet;

          console.log(`‚úÖ ${formattedData.length - 1} fonctionnalit√©s format√©es`);
        }
      }

      // Cr√©er aussi une feuille Roadmap
      this.createRoadmap(workbook);

      // Sauvegarder
      XLSX.writeFile(workbook, this.excelPath);

      console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë              ‚úÖ ONGLET FONCTIONNALIT√âS CR√â√â               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä Structure cr√©√©e :
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Onglet "Fonctionnalit√©s" avec colonnes format√©es
‚Ä¢ Onglet "Roadmap" avec vue d'ensemble
‚Ä¢ Exemples de donn√©es pour vous guider

üí° Comment utiliser :
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1. Ouvrez le fichier Excel
2. Allez dans l'onglet "Fonctionnalit√©s"
3. Remplacez/ajoutez vos donn√©es
4. Sauvegardez et relancez ce script pour reformater

üìÇ Fichier : ${this.excelPath}
`);

      // Ouvrir le fichier
      require('child_process').exec(`start "" "${this.excelPath}"`);

    } catch (error) {
      console.error('‚ùå Erreur:', error.message);
    }
  }

  /**
   * Cr√©er une feuille Roadmap
   */
  createRoadmap(workbook) {
    const roadmapData = [
      ['üìÖ ROADMAP ALFLIGHT'],
      [''],
      ['üü¢ TERMIN√â'],
      ['‚Ä¢ Dashboard pilote avec validations'],
      ['‚Ä¢ Carnet de vol avec segments multiples'],
      ['‚Ä¢ Export/Import profil complet'],
      ['‚Ä¢ Syst√®me de tracking Excel'],
      ['‚Ä¢ Configuration des unit√©s'],
      [''],
      ['üü° EN COURS'],
      ['‚Ä¢ D√©ploiement iOS TestFlight'],
      ['‚Ä¢ Progressive Web App (PWA)'],
      ['‚Ä¢ Synchronisation Google Sheets'],
      [''],
      ['üî¥ √Ä FAIRE - PRIORIT√â HAUTE'],
      ['‚Ä¢ Int√©gration m√©t√©o METAR/TAF'],
      ['‚Ä¢ Base de donn√©es a√©rodromes'],
      ['‚Ä¢ Calculs de performance avion'],
      [''],
      ['üü† √Ä FAIRE - PRIORIT√â MOYENNE'],
      ['‚Ä¢ Mode hors ligne complet'],
      ['‚Ä¢ Export PDF format EASA'],
      ['‚Ä¢ Import depuis ForeFlight'],
      ['‚Ä¢ Statistiques avanc√©es'],
      [''],
      ['‚ö™ FUTURES AM√âLIORATIONS'],
      ['‚Ä¢ Application mobile native'],
      ['‚Ä¢ Synchronisation multi-appareils'],
      ['‚Ä¢ Partage de vols entre pilotes'],
      ['‚Ä¢ Int√©gration planning vol']
    ];

    const roadmapSheet = XLSX.utils.aoa_to_sheet(roadmapData);
    roadmapSheet['!cols'] = [{ wch: 60 }];

    workbook.Sheets['Roadmap'] = roadmapSheet;
  }
}

// Lancer le formatage
const formatter = new FonctionnalitesFormatter();
formatter.formatFonctionnalites().catch(console.error);